generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  password          String
  name              String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  reports           Report[]
  insights          WeeklyInsight[]
  chatSessions      ChatSession[]
  healthMetrics     HealthMetric[]
  dnaSequences      DNASequence[]
  microbiomeSamples MicrobiomeSample[]
}

model Report {
  id        String   @id @default(cuid())
  userId    String
  type      String
  fileName  String
  filePath  String
  parsedData String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WeeklyInsight {
  id                    String   @id @default(cuid())
  userId                String
  weekNumber            Int
  year                  Int
  cardiovascularScore   Float?
  metabolicScore        Float?
  inflammationScore     Float?
  recommendations       String?
  generatedAt           DateTime @default(now())
  user                  User     @relation(fields: [userId], references: [id])
}

// New Models for Chat Functionality
model ChatSession {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String?     // Optional title for the chat session
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  messages  ChatMessage[]
}

model ChatMessage {
  id            String      @id @default(cuid())
  chatSessionId String
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  
  role          String      @default("USER") // Changed from MessageRole to String
  content       String      // Actual message content, potentially PHI
  
  llmProvider   String?     // e.g., "openai", "anthropic"
  llmModel      String?     // e.g., "gpt-4o", "claude-3-opus"
  
  createdAt     DateTime    @default(now())
}

// Health Intelligence Models
model HealthMetric {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          String   // e.g., 'blood_test', 'vital_sign', 'lab_result'
  name          String   // e.g., 'LDL Cholesterol', 'Blood Pressure'
  value         String   // Store as string to handle different metric types
  unit          String?  // e.g., 'mg/dL', 'bpm'
  referenceRange String?  // e.g., '0-100 mg/dL'
  date          DateTime // When the measurement was taken
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([type])
  @@index([date])
}

model DNASequence {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rsid        String   // Reference SNP cluster ID
  chromosome  String   // Chromosome number
  position    Int      // Base pair position
  genotype    String   // Genotype (e.g., 'AA', 'AG', 'TT')
  createdAt   DateTime @default(now())


  @@index([userId])
  @@index([rsid])
}

model MicrobiomeSample {
  id             String               @id @default(cuid())
  userId         String
  user           User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  sampleDate     DateTime
  sampleType     String               // e.g., 'stool', 'oral_swab'
  diversityScore Float?              // Alpha diversity metric
  organisms      MicrobiomeOrganism[]
  createdAt      DateTime             @default(now())


  @@index([userId])
}

model MicrobiomeOrganism {
  id                String          @id @default(cuid())
  sampleId          String
  sample            MicrobiomeSample @relation(fields: [sampleId], references: [id], onDelete: Cascade)
  name              String          // Organism name (e.g., 'Bacteroides fragilis')
  taxaLevel         String          // Taxonomic level (e.g., 'species', 'genus')
  abundance         Float           // Raw abundance count
  relativeAbundance Float?          // Relative abundance (0-1)
  createdAt         DateTime        @default(now())
}

