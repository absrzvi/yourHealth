import { BloodTestParser } from './BloodTestParser';
import { QuestBloodTestParser } from './QuestBloodTestParser';
import { DnaReportParser } from './DnaReportParser';
import { Dna23AndMeParser } from './Dna23AndMeParser';
import { MicrobiomeReportParser } from './MicrobiomeReportParser';
import { HormoneReportParser } from './HormoneReportParser';

type ParserType = 'blood' | 'dna' | 'microbiome' | 'hormone' | '23andme';

export async function parseReport(reportType: string, fileType: string, content: string) {
  reportType = reportType.toLowerCase();
  fileType = fileType.toLowerCase();
  
  // Check for specific report formats
  const is23AndMe = content.trim().startsWith('# This data file generated by 23andMe');
  const isQuestReport = content.includes('QUEST DIAGNOSTICS') && 
                      content.includes('Patient Report') &&
                      content.includes('Collection Date:');
  
  try {
    // Route to appropriate parser based on report type and content
    if (reportType === 'blood' && (fileType === 'text/plain' || fileType === 'text/csv')) {
      if (isQuestReport) {
        const parser = new QuestBloodTestParser();
        return await parser.parse(content);
      }
      const parser = new BloodTestParser();
      return await parser.parse(content);
    }
    
    if (reportType === 'dna' && fileType === 'text/plain') {
      if (is23AndMe) {
        const parser = new Dna23AndMeParser();
        return await parser.parse(content);
      }
      const parser = new DnaReportParser();
      return await parser.parse(content);
    }
    
    if (reportType === 'microbiome' && fileType === 'application/json') {
      const parser = new MicrobiomeReportParser();
      return await parser.parse(content);
    }
    
    if (reportType === 'hormone' && fileType === 'application/json') {
      const parser = new HormoneReportParser();
      return await parser.parse(content);
    }
    
    throw new Error(`No parser available for file type: ${reportType} (${fileType})`);
  } catch (error) {
    console.error(`Error in parseReport (${reportType}):`, error);
    throw new Error(`Failed to parse ${reportType} report: ${error.message}`);
  }
}
